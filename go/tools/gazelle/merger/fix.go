/* Copyright 2017 The Bazel Authors. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package merger

import (
	"sort"

	bf "github.com/bazelbuild/buildtools/build"
	"github.com/bazelbuild/rules_go/go/tools/gazelle/config"
)

// FixFile updates rules in oldFile that were generated by an older version of
// Gazelle to a newer form that can be merged with freshly generated rules.
func FixFile(oldFile *bf.File) *bf.File {
	return fixLoads(oldFile)
}

// fixLoads removes loads of unused go rules and adds loads of newly used rules.
func fixLoads(oldFile *bf.File) *bf.File {
	// Identify load statements for the Go rules, and determine which symbols
	// are actually used.
	type loadInfo struct {
		index      int
		old, fixed *bf.CallExpr
	}
	var loads []loadInfo
	usedKinds := make(map[string]bool)
	for i, stmt := range oldFile.Stmt {
		c, ok := stmt.(*bf.CallExpr)
		if !ok {
			continue
		}
		x, ok := c.X.(*bf.LiteralExpr)
		if !ok {
			continue
		}

		if x.Token == "load" {
			if len(c.List) == 0 {
				continue
			}
			if label, ok := c.List[0].(*bf.StringExpr); ok && label.Value == config.RulesGoDefBzlLabel {
				loads = append(loads, loadInfo{index: i, old: c})
			}
			continue
		}

		if knownKinds[x.Token] {
			usedKinds[x.Token] = true
		}
	}

	// Fix the load statements.
	changed := false
	var newFirstLoad *bf.CallExpr
	if len(loads) == 0 {
		newFirstLoad = fixLoad(nil, usedKinds)
		changed = true
	} else {
		for i := 0; i < len(loads); i++ {
			if i == 0 {
				loads[i].fixed = fixLoad(loads[i].old, usedKinds)
			} else {
				loads[i].fixed = fixLoad(loads[i].old, nil)
			}
			changed = changed || loads[i].fixed != loads[i].old
		}
	}
	if !changed {
		return oldFile
	}

	// Rebuild the file.
	fixedFile := *oldFile
	fixedFile.Stmt = nil
	if newFirstLoad != nil {
		fixedFile.Stmt = append(fixedFile.Stmt, newFirstLoad)
	}
	loadIndex := 0
	for i, stmt := range oldFile.Stmt {
		if loadIndex < len(loads) && i == loads[loadIndex].index {
			if loads[loadIndex].fixed != nil {
				fixedFile.Stmt = append(fixedFile.Stmt, loads[loadIndex].fixed)
			}
			loadIndex++
			continue
		}
		fixedFile.Stmt = append(fixedFile.Stmt, stmt)
	}
	return &fixedFile
}

// knownKinds is the set of symbols that Gazelle ever generated loads for,
// including symbols it no longer uses (e.g., cgo_library), not including
// other symbols loaded manually (e.g., go_embed_data). This function will
// only add or remove loads of these symbols.
var knownKinds = map[string]bool{
	"cgo_library": true,
	"go_binary":   true,
	"go_library":  true,
	"go_prefix":   true,
	"go_test":     true,
}

// fixLoad updates a load statement. load must be a load statement for
// the Go rules or nil. If nil, a new statement may be created. Symbols in
// kinds are added if they are not already present, symbols in knownKinds
// are removed if they are not in kinds, and other symbols and arguments
// are preserved. nil is returned if the statement should be deleted because
// it is empty.
func fixLoad(load *bf.CallExpr, kinds map[string]bool) *bf.CallExpr {
	var fixed bf.CallExpr
	if load == nil {
		fixed = bf.CallExpr{
			X: &bf.LiteralExpr{Token: "load"},
			List: []bf.Expr{
				&bf.StringExpr{Value: config.RulesGoDefBzlLabel},
			},
			ForceCompact: true,
		}
	} else {
		fixed = *load
	}

	var symbols []*bf.StringExpr
	var otherArgs []bf.Expr
	loadedKinds := make(map[string]bool)
	var added, removed int
	for _, arg := range fixed.List[1:] {
		if s, ok := arg.(*bf.StringExpr); ok {
			if !knownKinds[s.Value] || kinds != nil && kinds[s.Value] {
				symbols = append(symbols, s)
				loadedKinds[s.Value] = true
			} else {
				removed++
			}
		} else {
			otherArgs = append(otherArgs, arg)
		}
	}
	if kinds != nil {
		for kind, _ := range kinds {
			if _, ok := loadedKinds[kind]; !ok {
				symbols = append(symbols, &bf.StringExpr{Value: kind})
				added++
			}
		}
	}
	if added == 0 && removed == 0 {
		return load
	}

	sort.Stable(byString(symbols))
	fixed.List = fixed.List[:1]
	for _, sym := range symbols {
		fixed.List = append(fixed.List, sym)
	}
	fixed.List = append(fixed.List, otherArgs...)
	if len(fixed.List) == 1 {
		return nil
	}
	return &fixed
}

type byString []*bf.StringExpr

func (s byString) Len() int {
	return len(s)
}

func (s byString) Less(i, j int) bool {
	return s[i].Value < s[j].Value
}

func (s byString) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
